package com.rqpa.algo.tasks;

import java.util.Collections;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.LongSupplier;
import java.util.stream.LongStream;

import com.rqpa.algo.primes.BruteForcePrimeNumbersProvider;

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */
public class Task12
{
    public static void main(String[] args)
    {
        System.out.println(findFirstTriangleNumberWithOver500Divisors());
    }

    public static long findFirstTriangleNumberWithOver500Divisors()
    {
        long firstWithOver500Divisors = LongStream.generate(new TriangleNumberGenerator())
                .filter(n -> getDivisorsCount(n) > 500)
                .findFirst()
                .orElse(-1);
        return firstWithOver500Divisors;
    }

    private static int getDivisorsCount(long n)
    {
        long[] primesLtN = BruteForcePrimeNumbersProvider.instance.getPrimesLessThan((long) Math.sqrt(n + 1) + 1);
        Set<Long> divisors = new TreeSet<>();

        long factoring = n;
        for (long prime : primesLtN)
        {
            while (factoring % prime == 0)
            {
                factoring /= prime;

                Long[] multipliedDivisors = new Long[divisors.size()];
                int i = 0;
                for (Long divisor : divisors)
                {
                    multipliedDivisors[i++] = divisor * prime;
                }
                Collections.addAll(divisors, multipliedDivisors);
                divisors.add(prime);
            }
            if (factoring == 1)
            {
                break;
            }
        }
        divisors.add(1l);
        divisors.add(n);

        return divisors.size();
    }

    private static class TriangleNumberGenerator implements LongSupplier
    {
        private long lastNumberGenerated = 0;
        private long nextNumberToAdd = 1;

        @Override
        public long getAsLong()
        {
            lastNumberGenerated += nextNumberToAdd++;
            return lastNumberGenerated;
        }
    }
}
