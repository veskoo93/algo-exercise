package com.rqpa.algo.tasks;

import com.rqpa.algo.fibonacci.IterativeFibonacciSupplier;

/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
public class Task2
{
    public static void main(String[] args)
    {
        System.out.println(sumFibNumbersLessThanOrEqual4million());
    }

    public static long sumFibNumbersLessThanOrEqual4million()
    {
        // By definition first two items are 0 and 1. To match the indices we need to skip the first two numbers.
        long sum = IterativeFibonacciSupplier.instance.streamFromNth(2)
                .takeWhile(fib -> fib <= 4_000_000)
                .filter(fib -> fib % 2 == 0)
                .mapToLong(fib -> fib)
                .sum();
        return sum;
    }
}
