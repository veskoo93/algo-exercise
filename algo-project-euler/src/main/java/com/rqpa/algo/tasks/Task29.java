package com.rqpa.algo.tasks;

import java.util.BitSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import com.rqpa.algo.factorization.Factorization;
import com.rqpa.algo.primes.BruteForcePrimeNumbersProvider;

/*
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 */
public class Task29
{
    public static void main(String[] args)
    {
        System.out.println(findDistinctResultsCountForPowersAndBasesFrom2To100());
    }

    public static int findDistinctResultsCountForPowersAndBasesFrom2To100()
    {
        int maxPowerAndBase = 100;
        Set<FactorizedNumber> distinctTerms = new HashSet<>();

        for (int base = 2; base <= maxPowerAndBase; base++)
        {
            Map<Long, Long> baseFactorized = Factorization.factorizeToPrimes(base);

            for (int power = 2; power <= maxPowerAndBase; power++)
            {
                long powerLong = power;
                Map<Long, Long> poweredNumberFactorized = new HashMap<>(baseFactorized);
                poweredNumberFactorized.replaceAll((prime, primePower) -> primePower * powerLong);
                distinctTerms.add(new FactorizedNumber(poweredNumberFactorized));
            }
        }

        return distinctTerms.size();
    }

    private static class FactorizedNumber
    {
        // Quick hashcode/equals
        private final String factorsAsString;

        public FactorizedNumber(Map<Long, Long> factors)
        {
            StringBuilder factorsAsString = new StringBuilder();
            for (Map.Entry<Long, Long> baseAndPowerEntry : factors.entrySet())
            {
                factorsAsString.append(baseAndPowerEntry.getKey()).append("^").append(baseAndPowerEntry.getValue()).append(";");
            }
            this.factorsAsString = factorsAsString.toString();
        }

        @Override
        public boolean equals(Object o)
        {
            if (this == o)
                return true;
            if (o == null || getClass() != o.getClass())
                return false;

            FactorizedNumber that = (FactorizedNumber) o;

            return factorsAsString.equals(that.factorsAsString);
        }

        @Override
        public int hashCode()
        {
            return factorsAsString.hashCode();
        }
    }
}
